OBJECT Page 1304 Mini Sales Invoice
{
  OBJECT-PROPERTIES
  {
    Date=09-09-14;
    Time=15:26:35;
    Modified=Yes;
    Version List=NAVW18.00;
  }
  PROPERTIES
  {
    CaptionML=ENU=Sales Invoice;
    SourceTable=Table36;
    SourceTableView=WHERE(Document Type=FILTER(Invoice));
    PageType=Document;
    RefreshOnActivate=Yes;
    PromotedActionCategoriesML=ENU=New,Process,Report,Invoice,Posting,View;
    OnInit=BEGIN
             ShowDetailsTab := FALSE;
           END;

    OnOpenPage=BEGIN
                 ShowBillToShipToTab := ("Sell-to Customer No." <> "Bill-to Customer No.") OR ("Sell-to Address" <> "Ship-to Address");
                 IF UserSetupManagement.GetSalesFilter <> '' THEN BEGIN
                   FILTERGROUP(2);
                   SETRANGE("Responsibility Center",UserSetupManagement.GetSalesFilter);
                   FILTERGROUP(0);
                 END;
               END;

    OnNextRecord=VAR
                   Outcome@1001 : Integer;
                 BEGIN
                   Outcome := NEXT(Steps);
                   IF Outcome <> 0 THEN
                     ShowBillToShipToTab := ("Sell-to Customer No." <> "Bill-to Customer No.") OR ("Sell-to Address" <> "Ship-to Address");
                   EXIT(Outcome);
                 END;

    OnAfterGetRecord=BEGIN
                       CustomerSelected := "Sell-to Customer No." <> '';
                       IF AddInReady THEN BEGIN
                         UpdateSignature;

                         CurrPage.UPDATE(FALSE);
                       END;
                     END;

    OnNewRecord=BEGIN
                  "Responsibility Center" := UserSetupManagement.GetSalesFilter;
                END;

    OnDeleteRecord=BEGIN
                     CurrPage.SAVERECORD;
                     EXIT(ConfirmDeletion);
                   END;

    ActionList=ACTIONS
    {
      { 1900000003;  ;ActionContainer;
                      ActionContainerType=ActionItems }
      { 57      ;1   ;ActionGroup;
                      Name=Invoice;
                      CaptionML=ENU=&Invoice;
                      Image=Invoice }
      { 60      ;2   ;Action    ;
                      ShortCutKey=Shift+F7;
                      CaptionML=ENU=Customer;
                      ToolTipML=ENU=View or edit detailed information about the customer.;
                      RunObject=Page 1300;
                      RunPageLink=No.=FIELD(Sell-to Customer No.);
                      Promoted=Yes;
                      Enabled=CustomerSelected;
                      PromotedIsBig=Yes;
                      Image=Customer;
                      PromotedCategory=Category4 }
      { 2       ;2   ;Action    ;
                      Name=CreatePurchaseInvoice;
                      CaptionML=ENU=Create Purchase Invoice;
                      Promoted=No;
                      PromotedIsBig=Yes;
                      Image=NewInvoice;
                      PromotedCategory=Category4;
                      OnAction=VAR
                                 SelectedSalesLine@1001 : Record 37;
                                 PurchInvFromSalesInvoice@1000 : Codeunit 1314;
                               BEGIN
                                 CurrPage.SalesLines.PAGE.SETSELECTIONFILTER(SelectedSalesLine);
                                 PurchInvFromSalesInvoice.CreatePurchaseInvoice(Rec,SelectedSalesLine);
                               END;
                                }
      { 134     ;2   ;Action    ;
                      Name=GetRecurringSalesLines;
                      Ellipsis=Yes;
                      CaptionML=ENU=Get Recurring Sales Lines;
                      ToolTipML=ENU=Insert sales document lines that you have set up for the customer as recurring. Recurring sales lines could be for a monthly replenishment order or a fixed freight expense.;
                      PromotedIsBig=Yes;
                      Image=CustomerCode;
                      PromotedCategory=Category4;
                      OnAction=VAR
                                 StdCustSalesCode@1000 : Record 172;
                               BEGIN
                                 TESTFIELD("No.");
                                 TESTFIELD("Sell-to Customer No.");

                                 StdCustSalesCode.FILTERGROUP := 2;
                                 StdCustSalesCode.SETRANGE("Customer No.","Sell-to Customer No.");
                                 StdCustSalesCode.FILTERGROUP := 0;

                                 IF PAGE.RUNMODAL(PAGE::"Mini Std Customer Sales Codes",StdCustSalesCode) = ACTION::LookupOK THEN
                                   StdCustSalesCode.ApplyStdCodesToSalesLines(Rec,StdCustSalesCode);
                               END;
                                }
      { 64      ;2   ;Action    ;
                      Name=CopyDocument;
                      Ellipsis=Yes;
                      CaptionML=ENU=Copy Document;
                      ToolTipML=ENU=Copy document lines and header information from another sales document to this document. You can copy a posted sales invoice into a new sales invoice to quickly create a similar document.;
                      PromotedIsBig=Yes;
                      Image=CopyDocument;
                      PromotedCategory=New;
                      OnAction=BEGIN
                                 CopySalesDoc.SetSalesHeader(Rec);
                                 CopySalesDoc.RUNMODAL;
                                 CLEAR(CopySalesDoc);
                               END;
                                }
      { 23      ;2   ;Action    ;
                      Name=Dimensions;
                      AccessByPermission=TableData 348=R;
                      ShortCutKey=Shift+Ctrl+D;
                      CaptionML=ENU=Dimensions;
                      ToolTipML=ENU=View or edit the dimension sets that are set up for the customer on the sales document.;
                      Promoted=Yes;
                      PromotedIsBig=Yes;
                      Image=Dimensions;
                      PromotedCategory=Category4;
                      OnAction=BEGIN
                                 ShowDocDim;
                                 CurrPage.SAVERECORD;
                               END;
                                }
      { 69      ;1   ;ActionGroup;
                      Name=Posting;
                      CaptionML=ENU=P&osting;
                      Image=Post }
      { 71      ;2   ;Action    ;
                      Name=Post;
                      ShortCutKey=F9;
                      CaptionML=ENU=P&ost;
                      ToolTipML=ENU=Finalize the sales document. Posting updates your books with the document's amounts and quantities.;
                      Promoted=Yes;
                      PromotedIsBig=Yes;
                      Image=PostOrder;
                      PromotedCategory=Category5;
                      OnAction=BEGIN
                                 Post(CODEUNIT::"Sales-Post (Yes/No)");
                               END;
                                }
      { 1001    ;2   ;Action    ;
                      Name=Printer;
                      Ellipsis=Yes;
                      CaptionML=ENU=&Print;
                      ToolTipML=ENU=Finalize and print the sales document.;
                      Promoted=Yes;
                      PromotedIsBig=Yes;
                      Image=Print;
                      PromotedCategory=Category5;
                      OnAction=BEGIN
                                 PostAndPrint(CODEUNIT::"Sales-Post");
                               END;
                                }
      { 1002    ;2   ;Action    ;
                      Name=Email as PDF;
                      Ellipsis=Yes;
                      CaptionML=ENU=&Email;
                      ToolTipML=ENU=Finalize and attach the sales document to an email to the customer.;
                      Promoted=Yes;
                      PromotedIsBig=Yes;
                      Image=Email;
                      PromotedCategory=Category5;
                      OnAction=BEGIN
                                 Post(CODEUNIT::"Sales-Post + Email");
                               END;
                                }
      { 3       ;1   ;ActionGroup;
                      Name=View;
                      CaptionML=ENU=View }
      { 4       ;2   ;Action    ;
                      Name=Bill-to and Ship-to Address;
                      CaptionML=ENU=Ship-to and Bill-to Address;
                      ToolTipML=ENU=Show fields for the customer's shipping and billing addresses. You can specify a different address where the item or service is delivered or specify a different address where the document is sent.;
                      Promoted=Yes;
                      PromotedIsBig=Yes;
                      Image=ShipAddress;
                      PromotedCategory=Category6;
                      OnAction=BEGIN
                                 ShowBillToShipToTab := NOT ShowBillToShipToTab;
                               END;
                                }
      { 5       ;2   ;Action    ;
                      Name=InvoiceDetails;
                      CaptionML=ENU=Invoice Details;
                      ToolTipML=ENU=Show fields for invoice details, such as currency, shipment date, and payment terms. You can specify a currency that is different than your local currency for amounts on this sales document.;
                      Promoted=Yes;
                      PromotedIsBig=Yes;
                      Image=TaxDetail;
                      PromotedCategory=Category6;
                      OnAction=BEGIN
                                 ShowDetailsTab := NOT ShowDetailsTab;
                               END;
                                }
    }
  }
  CONTROLS
  {
    { 1900000001;0;Container;
                ContainerType=ContentArea }

    { 1   ;1   ;Group     ;
                Name=SalesInvoice;
                CaptionML=ENU=Sales Invoice;
                GroupType=Group }

    { 13  ;2   ;Group     ;
                GroupType=Group }

    { 6   ;3   ;Field     ;
                CaptionML=ENU=Customer Name;
                ToolTipML=ENU=Specifies the name of the customer that the items on the invoice will be shipped to.;
                NotBlank=Yes;
                SourceExpr="Sell-to Customer Name";
                OnValidate=BEGIN
                             IF MiniCustomerMgt.ValidateSellToCustomer(Rec,xRec) THEN
                               CurrPage.UPDATE;
                           END;

                OnLookup=BEGIN
                           IF MiniCustomerMgt.LookupSellToCustomer(Rec,xRec) THEN
                             CurrPage.UPDATE;
                         END;

                ShowMandatory=TRUE }

    { 75  ;3   ;Field     ;
                CaptionML=ENU=Address;
                ToolTipML=ENU=Specifies the address of the customer that the invoice will be shipped to.;
                SourceExpr="Sell-to Address" }

    { 11  ;3   ;Field     ;
                CaptionML=ENU=Address 2;
                ToolTipML=ENU=Specifies an additional part of the address of the customer to whom the items on the invoice will be shipped.;
                SourceExpr="Sell-to Address 2" }

    { 80  ;3   ;Field     ;
                CaptionML=ENU=Post Code;
                ToolTipML=ENU=Specifies the post code of the customer that you sell the items to.;
                SourceExpr="Sell-to Post Code" }

    { 79  ;3   ;Field     ;
                CaptionML=ENU=City;
                ToolTipML=ENU=Specifies the city name of the customer that the items on the invoice will be shipped to.;
                SourceExpr="Sell-to City" }

    { 15  ;2   ;Group     ;
                GroupType=Group }

    { 8   ;3   ;Field     ;
                CaptionML=ENU=Contact;
                ToolTipML=ENU=Specifies the name of the person to contact at the customer that the items on the invoice will be shipped to.;
                SourceExpr="Sell-to Contact" }

    { 43  ;3   ;Field     ;
                ToolTipML=ENU=Specifies the date on which you create the sales document. The date will appear on the printed sales document. By default, today's date is entered.;
                SourceExpr="Document Date" }

    { 12  ;3   ;Field     ;
                ToolTipML=ENU=Specifies the date when the posting of the sales document will be recorded. By default, today's date is entered.;
                SourceExpr="Posting Date";
                Importance=Promoted }

    { 28  ;3   ;Field     ;
                ToolTipML=ENU=Specifies when the sales invoice must be paid. By default, the field is calculated as the date in the Shipment Date field plus the period defined in the Payment Terms Code field.;
                SourceExpr="Due Date";
                Importance=Promoted }

    { 7   ;1   ;Group     ;
                Name=InvoiceDetails;
                CaptionML=ENU=Invoice Details;
                Visible=ShowDetailsTab;
                GroupType=Group }

    { 107 ;2   ;Field     ;
                ToolTipML=ENU=Specifies the currency of amounts on the sales lines. Leave the field empty to use the customer's default currency code.;
                SourceExpr="Currency Code";
                Importance=Promoted;
                OnValidate=BEGIN
                             CurrPage.UPDATE;
                             MiniSalesCalcDiscByType.ApplyDefaultInvoiceDiscount(0,Rec);
                           END;

                OnAssistEdit=BEGIN
                               CLEAR(ChangeExchangeRate);
                               IF "Posting Date" <> 0D THEN
                                 ChangeExchangeRate.SetParameter("Currency Code","Currency Factor","Posting Date")
                               ELSE
                                 ChangeExchangeRate.SetParameter("Currency Code","Currency Factor",WORKDATE);
                               IF ChangeExchangeRate.RUNMODAL = ACTION::OK THEN BEGIN
                                 VALIDATE("Currency Factor",ChangeExchangeRate.GetParameter);
                                 CurrPage.UPDATE;
                               END;
                               CLEAR(ChangeExchangeRate);
                             END;
                              }

    { 33  ;2   ;Field     ;
                ToolTipML=ENU=Specifies the date you expect to ship items on the sales document. By default, today's date is entered.;
                SourceExpr="Shipment Date" }

    { 112 ;2   ;Field     ;
                ToolTipML=ENU=Specifies whether the document is open, waiting to be approved, has been invoiced for prepayment, or has been released to the next stage of processing.;
                SourceExpr=Status;
                Importance=Promoted;
                Visible=FALSE }

    { 32  ;2   ;Field     ;
                ToolTipML=ENU=Specifies the number of the sales quote that the sales order was created from. You can track the number to sales quote documents that you have printed, saved, or emailed.;
                SourceExpr="Quote No." }

    { 121 ;2   ;Field     ;
                ToolTipML=ENU=Specifies whether the unit price on the line should be displayed including or excluding VAT.;
                SourceExpr="Prices Including VAT";
                Visible=FALSE;
                OnValidate=BEGIN
                             CurrPage.UPDATE;
                             CALCFIELDS("Invoice Discount Amount");
                             MiniSalesCalcDiscByType.ApplyDefaultInvoiceDiscount("Invoice Discount Amount",Rec);
                           END;
                            }

    { 156 ;2   ;Field     ;
                ToolTipML=ENU=Specifies the customer's VAT specification to link transactions made for this customer with the appropriate general ledger account according to the VAT posting setup.;
                SourceExpr="VAT Bus. Posting Group";
                OnValidate=BEGIN
                             CurrPage.UPDATE;
                             MiniSalesCalcDiscByType.ApplyDefaultInvoiceDiscount(0,Rec);
                           END;
                            }

    { 26  ;2   ;Field     ;
                ToolTipML=ENU=Specifies a formula that calculates the payment due date, payment discount date, and payment discount amount on the sales document. By default, the payment term from the customer card is entered.;
                SourceExpr="Payment Terms Code";
                Importance=Promoted }

    { 101 ;2   ;Field     ;
                ToolTipML=ENU=Specifies how payment for the sales document must be submitted, such as bank transfer or check. By default, the payment method from the customer card is entered.;
                SourceExpr="Payment Method Code" }

    { 10  ;2   ;Field     ;
                ToolTipML=ENU=Enter here a code for the sales header's transaction type. To see the transaction type codes in the Transaction Type table, click the field.;
                SourceExpr="Transaction Type" }

    { 14  ;1   ;Group     ;
                CaptionML=ENU=Signature;
                GroupType=Group }

    { 35  ;2   ;Field     ;
                Name=SignatureControl;
                ControlAddIn=[SignatureControl;PublicKeyToken=f160e78fbda96c3e] }

    { 1905885101;1;Group  ;
                Name=BilltoandShiptoAddresses;
                CaptionML=ENU=Ship-to and Bill-to Addresses;
                Visible=ShowBillToShipToTab;
                GroupType=Group }

    { 34  ;2   ;Group     ;
                Name=Shiptoaddress;
                CaptionML=ENU=Ship-to Address;
                GroupType=Group }

    { 31  ;3   ;Field     ;
                CaptionML=ENU=Address Code;
                ToolTipML=ENU=Specifies the code for another shipment address than the customer's own address, which is entered by default. To send products on the sales document to another address, choose the button in the Ship-to Code field and select a code that represents a ship-to address.;
                SourceExpr="Ship-to Code";
                Importance=Promoted }

    { 30  ;3   ;Field     ;
                CaptionML=ENU=Name;
                ToolTipML=ENU=Specifies the name to which the order will be shipped.;
                SourceExpr="Ship-to Name" }

    { 29  ;3   ;Field     ;
                CaptionML=ENU=Address;
                ToolTipML=ENU=Specifies the address that the order will be shipped to.;
                SourceExpr="Ship-to Address" }

    { 27  ;3   ;Field     ;
                CaptionML=ENU=Address 2;
                ToolTipML=ENU=Contains another line of the address that the order will be shipped to.;
                SourceExpr="Ship-to Address 2" }

    { 25  ;3   ;Field     ;
                CaptionML=ENU=Post Code;
                ToolTipML=ENU=Specifies the post code of the customer's shipping address.;
                SourceExpr="Ship-to Post Code" }

    { 21  ;3   ;Field     ;
                CaptionML=ENU=City;
                ToolTipML=ENU=Specifies the city name of the address that the order will be shipped to.;
                SourceExpr="Ship-to City" }

    { 20  ;3   ;Field     ;
                CaptionML=ENU=Contact;
                ToolTipML=ENU=Specifies the name of a contact person for the address that the order should be shipped to.;
                SourceExpr="Ship-to Contact" }

    { 19  ;2   ;Group     ;
                Name=BilltoCustomer;
                CaptionML=ENU=Bill-to Customer;
                GroupType=Group }

    { 16  ;3   ;Field     ;
                CaptionML=ENU=Name;
                ToolTipML=ENU=Specifies the customer to whom you will send the sales invoice, when different from the customer that you are selling to. By default, the name and address of the customer that you are selling to is entered.;
                SourceExpr="Bill-to Name";
                OnValidate=BEGIN
                             IF MiniCustomerMgt.ValidateBillToCustomer(Rec,xRec) THEN
                               CurrPage.UPDATE;
                           END;

                OnLookup=BEGIN
                           IF MiniCustomerMgt.LookupBillToCustomer(Rec,xRec) THEN
                             CurrPage.UPDATE;
                         END;
                          }

    { 18  ;3   ;Field     ;
                CaptionML=ENU=Address;
                ToolTipML=ENU=Specifies the address of the customer that you will send the invoice to.;
                SourceExpr="Bill-to Address" }

    { 9   ;3   ;Field     ;
                CaptionML=ENU=Address 2;
                ToolTipML=ENU=Contains another line of the address of the customer that you will send the invoice to.;
                SourceExpr="Bill-to Address 2" }

    { 85  ;3   ;Field     ;
                CaptionML=ENU=Post Code;
                ToolTipML=ENU=Specifies the post code of the customer's billing address.;
                SourceExpr="Bill-to Post Code" }

    { 22  ;3   ;Field     ;
                CaptionML=ENU=City;
                ToolTipML=ENU=Specifies the city name of the customer that you will send the invoice to.;
                SourceExpr="Bill-to City" }

    { 24  ;3   ;Field     ;
                CaptionML=ENU=Contact;
                ToolTipML=ENU=Specifies the name of the person you should contact at the customer that you are sending the invoice to.;
                SourceExpr="Bill-to Contact" }

    { 56  ;1   ;Part      ;
                Name=SalesLines;
                SubPageLink=Document No.=FIELD(No.);
                PagePartID=Page1305 }

  }
  CODE
  {
    VAR
      CopySalesDoc@1000 : Report 292;
      UserSetupManagement@1004 : Codeunit 5700;
      MiniSalesCalcDiscByType@1002 : Codeunit 1300;
      MiniCustomerMgt@1003 : Codeunit 1302;
      MiniLinesInstructionMgt@1012 : Codeunit 1320;
      ChangeExchangeRate@1001 : Page 511;
      ShowBillToShipToTab@1005 : Boolean;
      ShowDetailsTab@1007 : Boolean;
      OpenPostedSalesInvQst@1006 : TextConst 'ENU=The invoice has been posted and moved to the Posted Sales Invoice list.\\Do you want to open the posted invoice?';
      CustomerSelected@1008 : Boolean;
      PostAndPrintQst@1011 : TextConst 'ENU=Do you want to post and print the invoice?';
      AddInReady@1016 : Boolean;

    PROCEDURE SaveSignature@11(DataUrl@1006 : Text);
    VAR
      MemStream@1004 : DotNet "'mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.IO.MemoryStream";
      RegEx@1003 : DotNet "'System, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Text.RegularExpressions.Regex";
      Match@1002 : DotNet "'System, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Text.RegularExpressions.Match";
      Convert@1001 : DotNet "'mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Convert";
      OutStr@1000 : OutStream;
    BEGIN
      RegEx := RegEx.Regex('data\:image/(.*?);base64,(.*)');
      Match := RegEx.Match(DataUrl);
      IF Match.Success THEN BEGIN
        MemStream := MemStream.MemoryStream(Convert.FromBase64String(Match.Groups.Item(2).Value));
        Rec.SignatureImage.CREATEOUTSTREAM(OutStr);
        COPYSTREAM(OutStr,MemStream);
        Rec.MODIFY;
        CurrPage.UPDATE(FALSE);
      END ELSE
        ERROR('Invalid data type. Image expected.');
    END;

    PROCEDURE GetDataUriFromImage@44() DataUri : Text;
    VAR
      Image@1000 : DotNet "'System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a'.System.Drawing.Image";
      ImageFormat@1002 : DotNet "'System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a'.System.Drawing.Imaging.ImageFormat";
      MemStream@1004 : DotNet "'mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.IO.MemoryStream";
      Instr@1001 : InStream;
      Convert@1003 : DotNet "'mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Convert";
    BEGIN
        DataUri := 'data:image/';
        SignatureImage.CREATEINSTREAM(Instr);
        MemStream := MemStream.MemoryStream;
        COPYSTREAM(MemStream,Instr);
        Image := Image.FromStream(MemStream);
        ImageFormat := Image.RawFormat;
        CASE TRUE OF
          ImageFormat.Equals(ImageFormat.Gif): DataUri += 'gif';
          ImageFormat.Equals(ImageFormat.Jpeg): DataUri += 'jpg';
          ImageFormat.Equals(ImageFormat.Png): DataUri += 'png';
        END;

        DataUri += ';base64,' + Convert.ToBase64String(MemStream.ToArray);
    END;

    LOCAL PROCEDURE Post@4(PostingCodeunitID@1000 : Integer);
    VAR
      PreAssignedNo@1001 : Code[20];
    BEGIN
      MiniLinesInstructionMgt.SalesCheckAllLinesHaveQuantityAssigned(Rec);
      PreAssignedNo := "No.";
      SendToPosting(PostingCodeunitID);
      ShowPostedConfirmationMessage(PreAssignedNo);
    END;

    LOCAL PROCEDURE PostAndPrint@1(PostingCodeunitID@1000 : Integer);
    VAR
      SalesInvHeader@1001 : Record 112;
      DocumentNo@1002 : Code[20];
      PreAssignedNo@1003 : Code[20];
    BEGIN
      MiniLinesInstructionMgt.SalesCheckAllLinesHaveQuantityAssigned(Rec);

      IF NOT CONFIRM(PostAndPrintQst,FALSE) THEN
        EXIT;

      PreAssignedNo := "No.";
      SendToPosting(PostingCodeunitID);

      IF "Last Posting No." = '' THEN
        DocumentNo := "No."
      ELSE
        DocumentNo := "Last Posting No.";

      IF SalesInvHeader.GET(DocumentNo) THEN BEGIN
        SalesInvHeader.SETRECFILTER;
        COMMIT;
        SalesInvHeader.PrintRecords(TRUE);
        ShowPostedConfirmationMessage(PreAssignedNo);
      END;
    END;

    LOCAL PROCEDURE ShowPostedConfirmationMessage@7(PreAssignedNo@1001 : Code[20]);
    VAR
      SalesInvoiceHeader@1000 : Record 112;
    BEGIN
      SalesInvoiceHeader.SETRANGE("Pre-Assigned No.",PreAssignedNo);
      IF SalesInvoiceHeader.FINDFIRST THEN
        IF DIALOG.CONFIRM(OpenPostedSalesInvQst,FALSE) THEN
          PAGE.RUN(PAGE::"Mini Posted Sales Invoice",SalesInvoiceHeader);
    END;

    PROCEDURE UpdateSignature@13();
    BEGIN
      CurrPage.SignatureControl.ClearSignature;

      CALCFIELDS(SignatureImage);
      IF SignatureImage.HASVALUE THEN BEGIN
        CurrPage.SignatureControl.PutSignature(GetDataUriFromImage);
      END;
      CurrPage.UPDATE(FALSE);
    END;

    EVENT SignatureControl@-37::AddInReady@2();
    BEGIN
      AddInReady := TRUE;
      UpdateSignature;
    END;

    EVENT SignatureControl@-37::UpdateSignature@3();
    BEGIN
      UpdateSignature;
    END;

    EVENT SignatureControl@-37::SaveSignature@4(signatureData@1000 : Text);
    BEGIN
      SaveSignature(signatureData);
    END;

    BEGIN
    END.
  }
}

