<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <assembly alias="System.Drawing" name="System.Drawing, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
  <data name="$this.BackgroundImage" type="System.Drawing.Bitmap, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
    <value>
        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
</value>
  </data>
</root>