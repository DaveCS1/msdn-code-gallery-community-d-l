#pragma warning disable 1591
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.239
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Services
{
    using System;
    using System.ComponentModel;
    using System.Data.Linq.Mapping;
    
    
    [global::System.Data.Linq.Mapping.DatabaseAttribute(Name="Server")]
    public partial class IdRangesDataContext : System.Data.Linq.DataContext
    {
        
        private static System.Data.Linq.Mapping.MappingSource mappingSource = new AttributeMappingSource();
        
    #region Extensibility Method Definitions
    partial void OnCreated();
    partial void InsertIdRange(IdRange instance);
    partial void UpdateIdRange(IdRange instance);
    partial void DeleteIdRange(IdRange instance);
    #endregion
        
        public IdRangesDataContext() : 
                base(global::Services.Properties.Settings.Default.Server, mappingSource)
        {
            OnCreated();
        }
        
        public IdRangesDataContext(string connection) : 
                base(connection, mappingSource)
        {
            OnCreated();
        }
        
        public IdRangesDataContext(System.Data.IDbConnection connection) : 
                base(connection, mappingSource)
        {
            OnCreated();
        }
        
        public IdRangesDataContext(string connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
                base(connection, mappingSource)
        {
            OnCreated();
        }
        
        public IdRangesDataContext(System.Data.IDbConnection connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
                base(connection, mappingSource)
        {
            OnCreated();
        }
        
        public System.Data.Linq.Table<IdRange> IdRanges
        {
            get
            {
                return this.GetTable<IdRange>();
            }
        }
    }
    
    [global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.IdRanges")]
    public partial class IdRange : INotifyPropertyChanging, INotifyPropertyChanged
    {
        
        private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
        
        private int _Id;
        
        private string _Machine;
        
        private int _Min;
        
        private int _Max;
        
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnMachineChanging(string value);
    partial void OnMachineChanged();
    partial void OnMinChanging(int value);
    partial void OnMinChanged();
    partial void OnMaxChanging(int value);
    partial void OnMaxChanged();
    #endregion
        
        public IdRange()
        {
            OnCreated();
        }
        
        [global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
        public int Id
        {
            get
            {
                return this._Id;
            }
            set
            {
                if ((this._Id != value))
                {
                    this.OnIdChanging(value);
                    this.SendPropertyChanging();
                    this._Id = value;
                    this.SendPropertyChanged("Id");
                    this.OnIdChanged();
                }
            }
        }
        
        [global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Machine", DbType="NChar(25) NOT NULL", CanBeNull=false)]
        public string Machine
        {
            get
            {
                return this._Machine;
            }
            set
            {
                if ((this._Machine != value))
                {
                    this.OnMachineChanging(value);
                    this.SendPropertyChanging();
                    this._Machine = value;
                    this.SendPropertyChanged("Machine");
                    this.OnMachineChanged();
                }
            }
        }
        
        [global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Min", DbType="Int NOT NULL")]
        public int Min
        {
            get
            {
                return this._Min;
            }
            set
            {
                if ((this._Min != value))
                {
                    this.OnMinChanging(value);
                    this.SendPropertyChanging();
                    this._Min = value;
                    this.SendPropertyChanged("Min");
                    this.OnMinChanged();
                }
            }
        }
        
        [global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Max", DbType="Int NOT NULL")]
        public int Max
        {
            get
            {
                return this._Max;
            }
            set
            {
                if ((this._Max != value))
                {
                    this.OnMaxChanging(value);
                    this.SendPropertyChanging();
                    this._Max = value;
                    this.SendPropertyChanged("Max");
                    this.OnMaxChanged();
                }
            }
        }
        
        public event PropertyChangingEventHandler PropertyChanging;
        
        public event PropertyChangedEventHandler PropertyChanged;
        
        protected virtual void SendPropertyChanging()
        {
            if ((this.PropertyChanging != null))
            {
                this.PropertyChanging(this, emptyChangingEventArgs);
            }
        }
        
        protected virtual void SendPropertyChanged(String propertyName)
        {
            if ((this.PropertyChanged != null))
            {
                this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
            }
        }
    }
}
#pragma warning restore 1591
