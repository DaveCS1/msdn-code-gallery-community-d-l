<?xml version="1.0" encoding="UTF-8" ?>
<xsl:stylesheet version="1.0" xmlns:n="http://schemas.microsoft.com/BizTalkServer/2004/10/BAM" xmlns:xsl="http://www.w3.org/1999/XSL/Transform" xmlns:msxsl="urn:schemas-microsoft-com:xslt" exclude-result-prefixes="msxsl">
  <xsl:output method="text" omit-xml-declaration="yes"/>
  <xsl:template match="n:BAMDefinition">
    <xsl:text>//------------------------------------------------------------------------------
// &lt;autogenerated&gt;
//     This code was generated by a tool.
//     Runtime Version: 2.0.50727.42
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// &lt;/autogenerated&gt;
//------------------------------------------------------------------------------
namespace Contoso.Cloud.Integration.Common.Activities
{
    #region Using Statements
    using System;
    using System.Runtime.CompilerServices;

    using Contoso.Cloud.Integration.Framework.ActivityTracking;
    #endregion</xsl:text>
    <xsl:apply-templates select="n:Activity"/>
    }
  </xsl:template>

  <xsl:template match="n:Activity">
    <xsl:variable name="className" select="concat(@Name, '')" />
    
    /// &lt;summary&gt;
    /// Provides a strongly type class for BAM activity <xsl:value-of select="@Name"/>.
    /// &lt;/summary&gt;
    [Serializable]
    [CompilerGenerated]
    public partial class <xsl:value-of select="$className"/> : ActivityBase
    {
    /// &lt;summary&gt;
    /// Defines the name of the BAM activity.
    /// &lt;/summary&gt;
    private const string activityName = "<xsl:value-of select="@Name"/>";
    <xsl:call-template name="CheckPointNames"/>

    <xsl:variable name="param" select="concat(translate(substring(@Name,1,1),'ABCDEFGHIJKLMNOPQRSTUVWXYZ','abcdefghijklmnopqrstuvwxyz'),substring(@Name,2))" />

    #region Constructors
    /// &lt;summary&gt;
    /// Initializes a new instance of the &lt;see cref="<xsl:value-of select="$className"/>"/&gt; using the specified BAM activity ID.
    /// &lt;/summary&gt;
    /// &lt;param name="activityID"&gt;The ID of the BAM activity.&lt;/param&gt;
    public <xsl:value-of select="$className"/>(string activityID)
    {
      this.ActivityID = activityID;
    }

    /// &lt;summary&gt;
    /// Initializes a new instance of the &lt;see cref="<xsl:value-of select="$className"/>"/&gt; using the specified BAM activity ID and continuation token.
    /// &lt;/summary&gt;
    /// &lt;param name="activityID"&gt;The ID of the BAM activity.&lt;/param&gt;
    /// &lt;param name="continuationToken"&gt;A continuation token that is used to correlate heterogeneous information within the BAM infrastructure.&lt;/param&gt;
    public <xsl:value-of select="$className"/>(string activityID, string continuationToken)
    {
      this.ActivityID = activityID;
      this.ContinuationToken = continuationToken;
    }

    #endregion

    #region Public properties
    /// &lt;summary&gt;
    /// The activity name as defined in the BAM Excel spreadsheet.
    /// &lt;/summary&gt;
    public override string ActivityName
    {
      get
      {
        return activityName;
      }
    }
    
    <xsl:apply-templates select="n:Checkpoint"/>
    #endregion
    }
  </xsl:template>

  <xsl:template match="n:Checkpoint">
    <xsl:variable name="Name" select="@Name"/>
    <xsl:variable name="DisplayName" select="translate(@DisplayName, ' ', '')"/>

    <xsl:choose>
      <xsl:when test="@DataType='DATETIME'">
        <xsl:call-template name="Property">
          <xsl:with-param name="dataType">DateTime</xsl:with-param>
          <xsl:with-param name="Name">
            <xsl:value-of select="$Name"/>
          </xsl:with-param>
          <xsl:with-param name="DisplayName">
            <xsl:value-of select="@Name"/>
          </xsl:with-param>
        </xsl:call-template>
      </xsl:when>
      <xsl:when test="@DataType='FLOAT'">
        <xsl:call-template name="Property">
          <xsl:with-param name="dataType">double</xsl:with-param>
          <xsl:with-param name="Name">
            <xsl:value-of select="$Name"/>
          </xsl:with-param>
          <xsl:with-param name="DisplayName">
            <xsl:value-of select="@Name"/>
          </xsl:with-param>
        </xsl:call-template>
      </xsl:when>
      <xsl:when test="@DataType='NVARCHAR'">
        <xsl:call-template name="Property">
          <xsl:with-param name="dataType">string</xsl:with-param>
          <xsl:with-param name="Name">
            <xsl:value-of select="$Name"/>
          </xsl:with-param>
          <xsl:with-param name="DisplayName">
            <xsl:value-of select="@Name"/>
          </xsl:with-param>
        </xsl:call-template>
      </xsl:when>
      <xsl:when test="@DataType='INT'">
        <xsl:call-template name="Property">
          <xsl:with-param name="dataType">int</xsl:with-param>
          <xsl:with-param name="Name">
            <xsl:value-of select="$Name"/>
          </xsl:with-param>
          <xsl:with-param name="DisplayName">
            <xsl:value-of select="@Name"/>
          </xsl:with-param>
        </xsl:call-template>
      </xsl:when>
    </xsl:choose>
  </xsl:template>
  
  <xsl:template name="CheckPointNames">
    #region Activity item names
    <xsl:for-each select="n:Checkpoint">
      /// &lt;summary&gt;
      /// Defines the name of the <xsl:value-of select="translate(@Name, ' ', '')"/> milestone or business data item.
      /// &lt;/summary&gt;
      public const string <xsl:value-of select="translate(@Name, ' ', '')"/>FieldName = "<xsl:value-of select="@Name"/>";
    </xsl:for-each>
    #endregion
  </xsl:template>

  <xsl:template name="Property">
    <xsl:param name="dataType"/>
    <xsl:param name="Name"/>
    <xsl:param name="DisplayName"/>
    /// &lt;summary&gt;
    /// Gets or sets the value of the <xsl:value-of select="translate($DisplayName, ' ', '')"/> milestone or business business data item.
    /// &lt;/summary&gt;
    public <xsl:value-of select="$dataType"/><xsl:text> </xsl:text> <xsl:value-of select="translate($DisplayName, ' ', '')"/>
    {
      get
      {
        <xsl:value-of select="$dataType"/> value = (<xsl:value-of select="$dataType"/>)this.ActivityData[<xsl:value-of select='$Name'/>FieldName];

        return value;
      }
      set
      {
        this.ActivityData[<xsl:value-of select="$Name"/>FieldName] = value;
    }
}
  </xsl:template>
</xsl:stylesheet>
