<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="ContainerNameCheckRegEx" xml:space="preserve">
    <value>^[a-z,0-9][a-z,0-9,-]*$</value>
  </data>
  <data name="ContainerNameCleanupRegEx" xml:space="preserve">
    <value>[^a-z,0-9,-]</value>
  </data>
  <data name="ContainerNameDashRuleCheckRegEx" xml:space="preserve">
    <value>^([a-z]|\d){1}([a-z]|-|\d){1,61}([a-z]|\d){1}$</value>
  </data>
  <data name="DevelopmentFabricTraceListenerName" xml:space="preserve">
    <value>DevelopmentFabricTraceListener</value>
  </data>
  <data name="DiagnosticStorageAccountPropertyDescription" xml:space="preserve">
    <value>Defines the name of the configuration element in the storage configuration that defines the target storage queue for tracing events.</value>
  </data>
  <data name="DiagnosticStorageAccountPropertyDisplayName" xml:space="preserve">
    <value>Diagnostic Storage Account</value>
  </data>
  <data name="DiagnosticsConnectionStringSettingName" xml:space="preserve">
    <value>DiagnosticsConnectionString</value>
  </data>
  <data name="DiagnosticServiceEndpointPropertyDescription" xml:space="preserve">
    <value>Defines the name of the configuration element in the Windows Azure Service Bus Endpoint configuration that provides the Diagnostic Service endpoint information.</value>
  </data>
  <data name="DiagnosticServiceEndpointPropertyDisplayName" xml:space="preserve">
    <value>Diagnostic Service Endpoint</value>
  </data>
  <data name="GetErrorCodeRegEx" xml:space="preserve">
    <value>&lt;code&gt;(\w+)&lt;/code&gt;</value>
  </data>
  <data name="InMemoryQueueCapacityPropertyDescription" xml:space="preserve">
    <value>Defines the maximum capacity of the in-memory queue. The queue will not be able to accommodate any events beyond this limit.</value>
  </data>
  <data name="InMemoryQueueCapacityPropertyDisplayName" xml:space="preserve">
    <value>In-Memory Queue Capacity</value>
  </data>
  <data name="InMemoryQueueListenerSleepTimeoutDescription" xml:space="preserve">
    <value>Defines the timeout value (in milliseconds) instructing the in-memory queue listener to sleep once the queue is empty.</value>
  </data>
  <data name="InMemoryQueueListenerSleepTimeoutDisplayName" xml:space="preserve">
    <value>In-Memory Queue Listener Sleep Timeout (ms)</value>
  </data>
  <data name="MsgReliableServiceBusClientRetryConditions" xml:space="preserve">
    <value>Unable to establish a connection with or invoke an operation against the Service Bus endpoint {0} (reason: {1}). The operation will retry. This will be attempt #{2}. The action will continue retrying as prescribed by the retry policy.</value>
  </data>
  <data name="OnPremisesBufferedTraceListenerDataDescription" xml:space="preserve">
    <value>A custom trace listener implementation which writes information to a remote trace listener located on premise.</value>
  </data>
  <data name="OnPremisesBufferedTraceListenerDataDisplayName" xml:space="preserve">
    <value>On-Premises Buffered Trace Listener</value>
  </data>
  <data name="OnPremiseConfigurationSourceElementDescOnPremiseConfigurationSourceElementDescription" xml:space="preserve">
    <value>On-Premises Hosted Configuration Source</value>
  </data>
  <data name="OnPremiseConfigurationSourceElementDisplayName" xml:space="preserve">
    <value>A configuration source that uses the Azure Service Bus to communicate with a remote configuration source hosted on premise.</value>
  </data>
  <data name="OnPremiseConfigurationSourceElementServiceNamespaceDescription" xml:space="preserve">
    <value>Defines the Windows Azure Service Bus service namespace. This is a required field.</value>
  </data>
  <data name="OnPremiseConfigurationSourceElementServiceNamespaceDisplayName" xml:space="preserve">
    <value>Service Namespace</value>
  </data>
  <data name="OnPremiseConfigurationSourceElementServicePathDescription" xml:space="preserve">
    <value>Defines the Windows Azure Service Bus service path. This is an optional field.</value>
  </data>
  <data name="OnPremiseConfigurationSourceElementServicePathDisplayName" xml:space="preserve">
    <value>Service Path</value>
  </data>
  <data name="OnPremiseConfigurationSourceElementUseDefaultServiceBusEndpointDescription" xml:space="preserve">
    <value>Gets or sets a flag indicating whether or not the usage of the default service bus endpoint is permitted. This is a required field.</value>
  </data>
  <data name="OnPremiseConfigurationSourceElementUseDefaultServiceBusEndpointDisplayName" xml:space="preserve">
    <value>Use Default Service Bus Endpoint</value>
  </data>
  <data name="OnPremiseConfigurationSourceName" xml:space="preserve">
    <value>On-Premises Configuration Source</value>
  </data>
  <data name="ScopeOnPremiseConfigurationSourceCreateServiceClient" xml:space="preserve">
    <value>OnPremiseConfigurationSource -&gt; GetSection -&gt; Create Service Client</value>
  </data>
  <data name="ScopeOnPremiseConfigurationSourceInvokeService" xml:space="preserve">
    <value>OnPremiseConfigurationSource -&gt; GetSection -&gt; Invoke Service</value>
  </data>
  <data name="DiagnosticQueueEventBatchSizePropertyDescription" xml:space="preserve">
    <value>Defines the batch size for tracing events that are written into the diagnostic queue.</value>
  </data>
  <data name="DiagnosticQueueEventBatchSizePropertyDisplayName" xml:space="preserve">
    <value>Diagnostic Queue Event Batch Size</value>
  </data>
  <data name="DiagnosticQueueListenerSleepTimeoutPropertyDescription" xml:space="preserve">
    <value>Defines the timeout value (in milliseconds) instructing the Azure queue listener to sleep once the queue is empty.</value>
  </data>
  <data name="DiagnosticQueueListenerSleepTimeoutPropertyDisplayName" xml:space="preserve">
    <value>Diagnostic Queue Listener Sleep Timeout (ms)</value>
  </data>
  <data name="TableNameCheckRegEx" xml:space="preserve">
    <value>^([a-z]|[A-Z]){1}([a-z]|[A-Z]|\d){2,62}$</value>
  </data>
  <data name="UnknownRoleName" xml:space="preserve">
    <value>&lt;Unknown Role Name&gt;</value>
  </data>
  <data name="OnPremisesBufferedTraceListenerQueueName" xml:space="preserve">
    <value>TraceEventBuffer</value>
  </data>
  <data name="LoadBalancedContainerNamePrefix" xml:space="preserve">
    <value>slb-</value>
  </data>
  <data name="CloudApplicationInfoRoleInstanceIdProperty" xml:space="preserve">
    <value>Role Instance ID</value>
  </data>
  <data name="CloudApplicationInfoRoleNameProperty" xml:space="preserve">
    <value>Role Name</value>
  </data>
</root>